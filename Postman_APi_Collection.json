{
	"info": {
		"_postman_id": "e3fb7b7e-c00e-4cd0-a39c-a4dd966b2f7f",
		"name": "Python CRUD Demo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6322850"
	},
	"item": [
		{
			"name": "Get User By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{development}}/user/1",
					"host": [
						"{{development}}"
					],
					"path": [
						"user",
						"1"
					]
				},
				"description": "### Retrieve User Data\n\nThis endpoint is used to retrieve user data based on the provided user ID.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{development}}/user/1`\n    \n\n#### Response\n\nThe response of this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"active\": {\n      \"type\": \"integer\"\n    },\n    \"id\": {\n      \"type\": \"integer\"\n    },\n    \"username\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Get data",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/user/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"user",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.11.7"
						},
						{
							"key": "Date",
							"value": "Fri, 15 Nov 2024 21:53:58 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "58"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"active\": 1,\n    \"id\": 1,\n    \"username\": \"updateduser\"\n}"
				}
			]
		},
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"newuser\",\n    \"password\": \"password123\",\n    \"active\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{development}}/user",
					"host": [
						"{{development}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"updateduser\",\n    \"password\": \"newpassword123\",\n    \"active\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{development}}/user/1",
					"host": [
						"{{development}}"
					],
					"path": [
						"user",
						"1"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{development}}/user/4",
					"host": [
						"{{development}}"
					],
					"path": [
						"user",
						"4"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate pagination details\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('page').that.is.a('number');",
							"    pm.expect(responseData).to.have.property('per_page').that.is.a('number');",
							"    pm.expect(responseData).to.have.property('total_pages').that.is.a('number');",
							"    pm.expect(responseData).to.have.property('total_users').that.is.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Users array structure and data types\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.users).to.be.an('array');",
							"",
							"    responseData.users.forEach(function(user) {",
							"        pm.expect(user).to.have.property('active').that.is.a('number');",
							"        pm.expect(user).to.have.property('id').that.is.a('number');",
							"        pm.expect(user).to.have.property('username').that.is.a('string');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"All users have non-negative id, active status, and non-empty username\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.users).to.be.an('array');",
							"",
							"    responseData.users.forEach(user => {",
							"        pm.expect(user.id).to.be.at.least(0);",
							"        pm.expect(user.active).to.be.at.least(0);",
							"        pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{development}}/users?page=1&per_page=5",
					"host": [
						"{{development}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "5"
						}
					]
				},
				"description": "The endpoint retrieves a list of users with pagination, where the \"page\" parameter specifies the page number and the \"per_page\" parameter specifies the number of users per page. The response returns a JSON object with the pagination details such as \"page\", \"per_page\", \"total_pages\", and \"total_users\", along with an array of \"users\" containing their \"active\" status, \"id\", and \"username\".\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"page\": {\"type\": \"number\"},\n    \"per_page\": {\"type\": \"number\"},\n    \"total_pages\": {\"type\": \"number\"},\n    \"total_users\": {\"type\": \"number\"},\n    \"users\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"active\": {\"type\": \"number\"},\n          \"id\": {\"type\": \"number\"},\n          \"username\": {\"type\": \"string\"}\n        }\n      }\n    }\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "List",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/users?page=1&per_page=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Werkzeug/3.1.3 Python/3.11.7"
						},
						{
							"key": "Date",
							"value": "Fri, 15 Nov 2024 21:58:49 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Content-Length",
							"value": "165"
						},
						{
							"key": "Connection",
							"value": "close"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 5,\n    \"total_pages\": 1,\n    \"total_users\": 1,\n    \"users\": [\n        {\n            \"active\": 1,\n            \"id\": 5,\n            \"username\": \"newuser\"\n        }\n    ]\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}